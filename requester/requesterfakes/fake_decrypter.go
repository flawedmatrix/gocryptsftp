// Code generated by counterfeiter. DO NOT EDIT.
package requesterfakes

import (
	"sync"

	"github.com/flawedmatrix/gocryptsftp/requester"
)

type FakeDecrypter struct {
	DecryptNameStub        func(string, []byte) (string, error)
	decryptNameMutex       sync.RWMutex
	decryptNameArgsForCall []struct {
		arg1 string
		arg2 []byte
	}
	decryptNameReturns struct {
		result1 string
		result2 error
	}
	decryptNameReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDecrypter) DecryptName(arg1 string, arg2 []byte) (string, error) {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.decryptNameMutex.Lock()
	ret, specificReturn := fake.decryptNameReturnsOnCall[len(fake.decryptNameArgsForCall)]
	fake.decryptNameArgsForCall = append(fake.decryptNameArgsForCall, struct {
		arg1 string
		arg2 []byte
	}{arg1, arg2Copy})
	fake.recordInvocation("DecryptName", []interface{}{arg1, arg2Copy})
	fake.decryptNameMutex.Unlock()
	if fake.DecryptNameStub != nil {
		return fake.DecryptNameStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.decryptNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDecrypter) DecryptNameCallCount() int {
	fake.decryptNameMutex.RLock()
	defer fake.decryptNameMutex.RUnlock()
	return len(fake.decryptNameArgsForCall)
}

func (fake *FakeDecrypter) DecryptNameCalls(stub func(string, []byte) (string, error)) {
	fake.decryptNameMutex.Lock()
	defer fake.decryptNameMutex.Unlock()
	fake.DecryptNameStub = stub
}

func (fake *FakeDecrypter) DecryptNameArgsForCall(i int) (string, []byte) {
	fake.decryptNameMutex.RLock()
	defer fake.decryptNameMutex.RUnlock()
	argsForCall := fake.decryptNameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDecrypter) DecryptNameReturns(result1 string, result2 error) {
	fake.decryptNameMutex.Lock()
	defer fake.decryptNameMutex.Unlock()
	fake.DecryptNameStub = nil
	fake.decryptNameReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeDecrypter) DecryptNameReturnsOnCall(i int, result1 string, result2 error) {
	fake.decryptNameMutex.Lock()
	defer fake.decryptNameMutex.Unlock()
	fake.DecryptNameStub = nil
	if fake.decryptNameReturnsOnCall == nil {
		fake.decryptNameReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.decryptNameReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeDecrypter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.decryptNameMutex.RLock()
	defer fake.decryptNameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDecrypter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ requester.Decrypter = new(FakeDecrypter)
